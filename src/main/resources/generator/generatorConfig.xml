<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <context id="Mysql" targetRuntime="MyBatis3" defaultModelType="flat">
        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表； 一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号；
        <property name="beginningDelimiter" value="`"/> <property name="endingDelimiter" value="`"/>
        -->


        <!-- caseSensitive默认false，当数据库表名区分大小写时，可以将该属性设置为true
        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="tk.mybatis.mapper.common.Mapper"/>
            <property name="caseSensitive" value="true"/>
        </plugin>
         -->

        <!-- 该插件给实体类添加toString()方法  -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!-- 这个插件给由MBG生成的Java模型对象增加了equals和hashCode方法
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>
        -->

        <!--自定义生成注释的生成器-->
       <commentGenerator type="com.ldg.MyCommentGenerator">

       </commentGenerator>

        <jdbcConnection driverClass="${driverClass}"
                        connectionURL="${connectionURL}"
                        userId="${userId}"
                        password="${password}">
            <!-- 针对oracle数据库 -->
            <property name="remarksReporting" value="true"></property>
            <!-- 针对mysql数据库 -->
            <property name="useInformationSchema" value="true"></property>
        </jdbcConnection>
        <!-- java类型处理器 用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
         注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
        <javaTypeResolver type="com.ldg.MyJavaTypeResolver">-->
            <!-- true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型 false：默认,
             scale>0;length>18： 使用BigDecimal;
             scale=0;length[10,18]：使用Long；
             scale=0;length[5,9]：  使用Integer；
             scale=0;length<5：使用Short；
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
 -->

        <javaModelGenerator targetPackage="${packageName}.api.po" targetProject="${src_main_java}">
            <!-- for MyBatis3/MyBatis3Simple 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter； -->
            <property name="constructorBased" value="false"/>
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
            <!-- for MyBatis3 / MyBatis3Simple 是否创建一个不可变的类，如果为true， 那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类 -->
            <property name="immutable" value="false"/>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>
        <!--
        <sqlMapGenerator targetPackage="${packageName}.impl.mapper" targetProject="${src_main_resources}"/>
        -->
        <!-- 生成SQL map的XML文件生成器-->
        <sqlMapGenerator targetPackage="mybatis.mapper.${packageName}" targetProject="${src_main_resources}">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>
        <javaClientGenerator targetPackage="${packageName}.impl.mapper" targetProject="${src_main_java}"
                             type="XMLMAPPER">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>
        <!-- sql占位符，表示所有的表 -->
        <table tableName="${tableName}" enableCountByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false" enableUpdateByExample="false">
            <!--
            <generatedKey column="epa_id" sqlStatement="Mysql" identity="true" />
            -->
        </table>
    </context>
</generatorConfiguration>